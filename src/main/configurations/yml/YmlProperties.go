package main_configurations_yml

import (
	main_configurations_profile "baseapplicationgo/main/configurations/profile"
	main_utils "baseapplicationgo/main/utils"
	"fmt"
	"gopkg.in/yaml.v3"
	"log"
	"os"
	"sync"
)

const MSG_YML_BEANS = "Initializing yml properties bean."
const MSG_ERROR_MANDATORY_ENV = "Mandatory env variable not found: %s"
const MSG_ERROR_MANDATORY_SEPARATOR = "Mandatory separator not found: %s"
const MSG_ERROR_READ_YML = "Error to read yml file."
const MSG_ERROR_PARSE_YML = "Error to parse yml file."

const YML_BASE_DIRECTORY_MAIN_REFERENCE = "./zresources"
const YML_FILE_DEFAULT_BASE_NAME = "/application-properties-%s.yaml"

type AutoGeneratedYml struct {
	Logging struct {
		Level struct {
			Root                                           string `yaml:"root"`
			ComChallenger                                  string `yaml:"com.challenger"`
			OrgSpringframeworkDataMongodbCoreMongoTemplate string `yaml:"org.springframework.data.mongodb.core.MongoTemplate"`
		} `yaml:"level"`
	} `yaml:"logging"`
	Spring struct {
		Datasource struct {
			Platform           string `yaml:"platform"`
			PostgresHost       string `yaml:"postgres-host"`
			URL                string `yaml:"url"`
			Name               string `yaml:"name"`
			Username           string `yaml:"username"`
			Password           string `yaml:"password"`
			DriverClassName    string `yaml:"driver-class-name"`
			InitializationMode string `yaml:"initialization-mode"`
			ContinueOnError    bool   `yaml:"continue-on-error"`
		} `yaml:"datasource"`
		Jpa struct {
			Properties struct {
				Hibernate struct {
					Dialect string `yaml:"dialect"`
				} `yaml:"hibernate"`
			} `yaml:"properties"`
			Database  string `yaml:"database"`
			ShowSQL   bool   `yaml:"show-sql"`
			FormatSQL bool   `yaml:"format_sql"`
			Hibernate struct {
				DdlAuto    string `yaml:"ddl-auto"`
				Properties struct {
					Hibernate struct {
						ShowSQL   bool `yaml:"show_sql"`
						FormatSQL bool `yaml:"format_sql"`
					} `yaml:"hibernate"`
				} `yaml:"properties"`
			} `yaml:"hibernate"`
		} `yaml:"jpa"`
		CacheType string `yaml:"cache.type"`
		Data      struct {
			Redis struct {
				Password string `yaml:"password"`
				Sentinel struct {
					Master string   `yaml:"master"`
					Nodes  []string `yaml:"nodes"`
				} `yaml:"sentinel"`
				Lettuce struct {
					ShutdownTimeout string `yaml:"shutdown-timeout"`
				} `yaml:"lettuce"`
				Repositories struct {
					Enabled bool `yaml:"enabled"`
				} `yaml:"repositories"`
				DefaultManager struct {
					TTLInMinutes int `yaml:"ttl-in-minutes"`
				} `yaml:"default-manager"`
				Locking struct {
					TTLInMinutes int `yaml:"ttl-in-minutes"`
				} `yaml:"locking"`
			} `yaml:"redis"`
		} `yaml:"data"`
		Kafka struct {
			DefaultConfig struct {
				BootstrapServers string `yaml:"bootstrap-servers"`
				Listener         struct {
					Concurrency int `yaml:"concurrency"`
				} `yaml:"listener"`
				Consumer struct {
					BootstrapServers  string `yaml:"bootstrap-servers"`
					GroupID           string `yaml:"group-id"`
					KeyDeserializer   string `yaml:"key-deserializer"`
					ValueDeserializer string `yaml:"value-deserializer"`
					AutoOffsetReset   string `yaml:"auto-offset-reset"`
					MaxPollRecords    int    `yaml:"max-poll-records"`
					SessionTimeoutMs  int    `yaml:"session-timeout-ms"`
					MaxPollIntervalMs int    `yaml:"max-poll-interval-ms"`
					MaxRetries        int    `yaml:"max-retries"`
				} `yaml:"consumer"`
				Producer struct {
					BootstrapServers string `yaml:"bootstrap-servers"`
					Retries          int    `yaml:"retries"`
					KeySerializer    string `yaml:"key-serializer"`
					ValueSerializer  string `yaml:"value-serializer"`
				} `yaml:"producer"`
			} `yaml:"default-config"`
		} `yaml:"kafka"`
	} `yaml:"spring"`
	AppAccountChallenger struct {
		Openapi struct {
			DevURL  string `yaml:"dev-url"`
			ProdURL string `yaml:"prod-url"`
		} `yaml:"openapi"`
		Async struct {
			Default struct {
				ThreadMaxCorePoolSize int `yaml:"thread-max-core-pool-size"`
				MaxPoolSize           int `yaml:"max-pool-size"`
				QueueCapacity         int `yaml:"queue-capacity"`
			} `yaml:"default"`
		} `yaml:"async"`
	} `yaml:"app-account-challenger"`
}

var once sync.Once
var YmlConfigs *AutoGeneratedYml

func GetYmlConfigBean() *AutoGeneratedYml {
	once.Do(func() {
		if YmlConfigs == nil {
			YmlConfigs = getYmlConfig()
		}
	})
	return YmlConfigs
}

func getYmlConfig() *AutoGeneratedYml {

	log.Println(MSG_YML_BEANS)
	profile := main_configurations_profile.GetProfileBean().GetLowerCaseDescription()
	ymlPath := YML_BASE_DIRECTORY_MAIN_REFERENCE + fmt.Sprintf(
		YML_FILE_DEFAULT_BASE_NAME, profile)

	ymlProperties := AutoGeneratedYml{}

	yFile, err := os.ReadFile(ymlPath)
	main_utils.FailOnError(err, MSG_ERROR_READ_YML)

	err = yaml.Unmarshal(yFile, &ymlProperties)
	main_utils.FailOnError(err, MSG_ERROR_PARSE_YML)

	return &ymlProperties
}
