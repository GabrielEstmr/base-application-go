version: "3.9"
services:
    app-account-challenger:
      build:
        context: ./
        dockerfile: Dockerfile
      restart: always
      environment:
        APP_LOG_LEVEL: DEBUG
        MONGO_INITDB_ROOT_USERNAME: admin
        MONGO_INITDB_ROOT_PASSWORD: admin
        DB_MONGO_HOST: mongo
        REDIS_HOST: redis
        RABBITMQ_USER: admin
        RABBITMQ_PASSWORD: admin
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_DEFAULT_VHOST: dev01_mktplace
        OTEL_SERVICE_NAME: your-service-name
        CLUSTER_OTLP_ENDPOINT_ENV: otel-collector:4317
        CLUSTER_LOKI_ENDPOINT_ENV: loki:3100
        GMAIL_EMAIL_CLIENT_EMAIL: gabriel.estmr@gmail.com
        GMAIL_EMAIL_CLIENT_PASSWORD: zvqw wzdt jqiz rgul
      ports:
        - "8080:8080"
      depends_on:
        - mongo
        - redis
        - rabbitmq
      networks:
        - broker-base-go
    mongo:
      image: mongo:latest
      environment:
        - MONGO_DATA_DIR=/data/db
        - MONGO_INITDB_DATABASE=mongodb
        - MONGO_INITDB_ROOT_USERNAME=admin
        - MONGO_INITDB_ROOT_PASSWORD=admin
      ports:
        - 27017:27017
      networks:
        - broker-base-go
    redis:
      image: "redis:alpine"
      ports:
        - 6379:6379
      networks:
        - broker-base-go
    rabbitmq:
      image: "rabbitmq:3-management"
      environment:
        RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
        RABBITMQ_DEFAULT_USER: "admin"
        RABBITMQ_DEFAULT_PASS: "admin"
        RABBITMQ_DEFAULT_VHOST: "dev01_mktplace"
      ports:
        - "15672:15672"
        - "5672:5672"
      networks:
        - broker-base-go
    otel-collector:
      image: otel/opentelemetry-collector-contrib:0.82.0
      restart: always
      command:
        - --config=/etc/otelcol-contrib/otel-collector.yml
      volumes:
        - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
      ports:
        - "1888:1888" # pprof extension
        - "8888:8888" # Prometheus metrics exposed by the collector
        - "8889:8889" # Prometheus exporter metrics
        - "13133:13133" # health_check extension
        - "4317:4317" # OTLP gRPC receiver
        - "4318:4318" # OTLP http receiver
        - "55679:55679" # zpages extension
      depends_on:
        - jaeger
      networks:
        - broker-base-go
    prometheus:
      container_name: prometheus
      image: prom/prometheus
      restart: always
      command:
        - --config.file=/etc/prometheus/prometheus.yml
      volumes:
        - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"
      networks:
        - broker-base-go
    loki:
      image: grafana/loki:latest
      command: -config.file=/etc/loki/local-config.yaml
      ports:
        - "3100:3100"
      networks:
        - broker-base-go
    tempo:
      image: grafana/tempo:latest
      command: [ "-config.file=/etc/tempo.yml" ]
      volumes:
        - ./docker/tempo/tempo.yml:/etc/tempo.yml
      ports:
        - "3200:3200"   # tempo
        - "4317"  # otlp grpc
      networks:
        - broker-base-go
    grafana:
      container_name: grafana
      image: grafana/grafana
      volumes:
        - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      ports:
        - "3000:3000"
      networks:
        - broker-base-go
    jaeger:
      image: jaegertracing/all-in-one:latest
      restart: always
      environment:
        - COLLECTOR_OLTP_ENABLED=true
      ports:
        - "16686:16686"
        - "14268"
        - "14250"
      networks:
        - broker-base-go

networks:
  broker-base-go:
    driver: bridge